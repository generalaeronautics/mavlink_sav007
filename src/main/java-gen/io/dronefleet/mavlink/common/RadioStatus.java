package io.dronefleet.mavlink.common;

import io.dronefleet.mavlink.annotations.MavlinkFieldInfo;
import io.dronefleet.mavlink.annotations.MavlinkMessageBuilder;
import io.dronefleet.mavlink.annotations.MavlinkMessageInfo;
import io.dronefleet.mavlink.serialization.payload.PayloadFieldDecoder;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.nio.ByteBuffer;
import java.util.Objects;

/**
 * Status generated by radio and injected into MAVLink stream. 
 */
@MavlinkMessageInfo(
        id = 109,
        crc = 185,
        description = "Status generated by radio and injected into MAVLink stream."
)
public final class RadioStatus {
    private final int rssi;

    private final int remrssi;

    private final int txbuf;

    private final int noise;

    private final int remnoise;

    private final int rxerrors;

    private final int fixed;

    private RadioStatus(int rssi, int remrssi, int txbuf, int noise, int remnoise, int rxerrors,
            int fixed) {
        this.rssi = rssi;
        this.remrssi = remrssi;
        this.txbuf = txbuf;
        this.noise = noise;
        this.remnoise = remnoise;
        this.rxerrors = rxerrors;
        this.fixed = fixed;
    }

    /**
     * Returns a builder instance for this message.
     */
    @MavlinkMessageBuilder
    public static Builder builder() {
        return new Builder();
    }

    /**
     * Local (message sender) received signal strength indication in device-dependent 
     * units/scale. Values: [0-254], UINT8_MAX: invalid/unknown. 
     */
    @MavlinkFieldInfo(
            position = 1,
            unitSize = 1,
            description = "Local (message sender) received signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown."
    )
    public final int rssi() {
        return this.rssi;
    }

    /**
     * Remote (message receiver) signal strength indication in device-dependent units/scale. 
     * Values: [0-254], UINT8_MAX: invalid/unknown. 
     */
    @MavlinkFieldInfo(
            position = 2,
            unitSize = 1,
            description = "Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown."
    )
    public final int remrssi() {
        return this.remrssi;
    }

    /**
     * Remaining free transmitter buffer space. 
     */
    @MavlinkFieldInfo(
            position = 3,
            unitSize = 1,
            description = "Remaining free transmitter buffer space."
    )
    public final int txbuf() {
        return this.txbuf;
    }

    /**
     * Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on 
     * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown. 
     */
    @MavlinkFieldInfo(
            position = 4,
            unitSize = 1,
            description = "Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown."
    )
    public final int noise() {
        return this.noise;
    }

    /**
     * Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on 
     * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown. 
     */
    @MavlinkFieldInfo(
            position = 5,
            unitSize = 1,
            description = "Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown."
    )
    public final int remnoise() {
        return this.remnoise;
    }

    /**
     * Count of radio packet receive errors (since boot). 
     */
    @MavlinkFieldInfo(
            position = 6,
            unitSize = 2,
            description = "Count of radio packet receive errors (since boot)."
    )
    public final int rxerrors() {
        return this.rxerrors;
    }

    /**
     * Count of error corrected radio packets (since boot). 
     */
    @MavlinkFieldInfo(
            position = 7,
            unitSize = 2,
            description = "Count of error corrected radio packets (since boot)."
    )
    public final int fixed() {
        return this.fixed;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || !getClass().equals(o.getClass())) return false;
        RadioStatus other = (RadioStatus)o;
        if (!Objects.deepEquals(rssi, other.rssi)) return false;
        if (!Objects.deepEquals(remrssi, other.remrssi)) return false;
        if (!Objects.deepEquals(txbuf, other.txbuf)) return false;
        if (!Objects.deepEquals(noise, other.noise)) return false;
        if (!Objects.deepEquals(remnoise, other.remnoise)) return false;
        if (!Objects.deepEquals(rxerrors, other.rxerrors)) return false;
        if (!Objects.deepEquals(fixed, other.fixed)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        int result = 0;
        result = 31 * result + Objects.hashCode(rssi);
        result = 31 * result + Objects.hashCode(remrssi);
        result = 31 * result + Objects.hashCode(txbuf);
        result = 31 * result + Objects.hashCode(noise);
        result = 31 * result + Objects.hashCode(remnoise);
        result = 31 * result + Objects.hashCode(rxerrors);
        result = 31 * result + Objects.hashCode(fixed);
        return result;
    }

    @Override
    public String toString() {
        return "RadioStatus{rssi=" + rssi
                 + ", remrssi=" + remrssi
                 + ", txbuf=" + txbuf
                 + ", noise=" + noise
                 + ", remnoise=" + remnoise
                 + ", rxerrors=" + rxerrors
                 + ", fixed=" + fixed + "}";
    }

    public static RadioStatus deserialize(ByteBuffer input) {
        int rxerrors = PayloadFieldDecoder.decodeUint16(input);
        int fixed = PayloadFieldDecoder.decodeUint16(input);
        int rssi = PayloadFieldDecoder.decodeUint8(input);
        int remrssi = PayloadFieldDecoder.decodeUint8(input);
        int txbuf = PayloadFieldDecoder.decodeUint8(input);
        int noise = PayloadFieldDecoder.decodeUint8(input);
        int remnoise = PayloadFieldDecoder.decodeUint8(input);
        return new RadioStatus(rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed);
    }

    public static final class Builder {
        private int rssi;

        private int remrssi;

        private int txbuf;

        private int noise;

        private int remnoise;

        private int rxerrors;

        private int fixed;

        /**
         * Local (message sender) received signal strength indication in device-dependent 
         * units/scale. Values: [0-254], UINT8_MAX: invalid/unknown. 
         */
        @MavlinkFieldInfo(
                position = 1,
                unitSize = 1,
                description = "Local (message sender) received signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown."
        )
        public final Builder rssi(int rssi) {
            this.rssi = rssi;
            return this;
        }

        /**
         * Remote (message receiver) signal strength indication in device-dependent units/scale. 
         * Values: [0-254], UINT8_MAX: invalid/unknown. 
         */
        @MavlinkFieldInfo(
                position = 2,
                unitSize = 1,
                description = "Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], UINT8_MAX: invalid/unknown."
        )
        public final Builder remrssi(int remrssi) {
            this.remrssi = remrssi;
            return this;
        }

        /**
         * Remaining free transmitter buffer space. 
         */
        @MavlinkFieldInfo(
                position = 3,
                unitSize = 1,
                description = "Remaining free transmitter buffer space."
        )
        public final Builder txbuf(int txbuf) {
            this.txbuf = txbuf;
            return this;
        }

        /**
         * Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on 
         * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown. 
         */
        @MavlinkFieldInfo(
                position = 4,
                unitSize = 1,
                description = "Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown."
        )
        public final Builder noise(int noise) {
            this.noise = noise;
            return this;
        }

        /**
         * Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on 
         * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown. 
         */
        @MavlinkFieldInfo(
                position = 5,
                unitSize = 1,
                description = "Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown."
        )
        public final Builder remnoise(int remnoise) {
            this.remnoise = remnoise;
            return this;
        }

        /**
         * Count of radio packet receive errors (since boot). 
         */
        @MavlinkFieldInfo(
                position = 6,
                unitSize = 2,
                description = "Count of radio packet receive errors (since boot)."
        )
        public final Builder rxerrors(int rxerrors) {
            this.rxerrors = rxerrors;
            return this;
        }

        /**
         * Count of error corrected radio packets (since boot). 
         */
        @MavlinkFieldInfo(
                position = 7,
                unitSize = 2,
                description = "Count of error corrected radio packets (since boot)."
        )
        public final Builder fixed(int fixed) {
            this.fixed = fixed;
            return this;
        }

        public final RadioStatus build() {
            return new RadioStatus(rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed);
        }
    }
}
